// Copyright 2020 The Tekton Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package tekton.results.v1alpha2;

import "resources.proto";

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/api/client.proto";
import "google/api/resource.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";

option go_package = "github.com/tektoncd/results/proto/v1alpha2/results_go_proto";

service Results {
  rpc CreateResult(CreateResultRequest) returns (Result) {
    option (google.api.http) = {
      post: "/apis/results.tekton.dev/v1alpha2/results/{parent=*}/results"
      body: "result"
    };
  }

  rpc UpdateResult(UpdateResultRequest) returns (Result) {
    option (google.api.http) = {
      patch: "/apis/results.tekton.dev/v1alpha2/results/{result.name=*/results/*}"
      body: "result"
    };
  }

  rpc GetResult(GetResultRequest) returns (Result) {
    option (google.api.http) = {
      get: "/apis/results.tekton.dev/v1alpha2/results/{name=*/results/*}"
    };
  }

  rpc DeleteResult(DeleteResultRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/apis/results.tekton.dev/v1alpha2/results/{name=*/results/*}"
    };
  }

  rpc ListResults(ListResultsRequest) returns (ListResultsResponse) {
    option (google.api.http) = {
      get: "/apis/results.tekton.dev/v1alpha2/results/{parent=*}/results"
    };
  }

  rpc CreateRecord(CreateRecordRequest) returns (Record) {
    option (google.api.http) = {
      post: "/apis/results.tekton.dev/v1alpha2/results/{parent=*/results/*}/records"
      body: "record"
    };
  }

  rpc UpdateRecord(UpdateRecordRequest) returns (Record) {
    option (google.api.http) = {
      patch: "/apis/results.tekton.dev/v1alpha2/results/{record.name=*/results/*/records/*}"
      body: "record"
    };
  }

  rpc GetRecord(GetRecordRequest) returns (Record) {
    option (google.api.http) = {
      get: "/apis/results.tekton.dev/v1alpha2/results/{name=*/results/*/records/*}"
    };
  }

  rpc ListRecords(ListRecordsRequest) returns (ListRecordsResponse) {
    option (google.api.http) = {
      get: "/apis/results.tekton.dev/v1alpha2/results/{parent=*/results/*}/records"
    };
  }

  rpc DeleteRecord(DeleteRecordRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/apis/results.tekton.dev/v1alpha2/results/{name=*/results/*/records/*}"
    };
  }
}

service Logs {
  rpc GetLog(GetLogRequest) returns (stream Log) {
    option (google.api.http) = {
      get: "/apis/results.tekton.dev/v1alpha2/logs/{name=*/results/*/records/*}"
    };
    option (google.api.method_signature) = "name";
  }

  rpc ListLogs(ListRecordsRequest) returns (ListRecordsResponse) {
    option (google.api.http) = {
      get: "/apis/results.tekton.dev/v1alpha2/logs/{parent=*/results/*}/logs"
    };
    option (google.api.method_signature) = "parent";
  }

  rpc UpdateLog(stream Log) returns (LogSummary) {
    option (google.api.method_signature) = "log";
  }

  rpc DeleteLog(DeleteLogRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/apis/results.tekton.dev/v1alpha2/logs/{name=*/results/*/records/*}"
    };
    option (google.api.method_signature) = "name";
  }

}

message CreateResultRequest {
  // User provided parent to partition results under.
  string parent = 1;

  Result result = 2 [(google.api.field_behavior) = REQUIRED];
}

message DeleteResultRequest {
  string name = 1;
}

message UpdateResultRequest {
  string name = 1;
  Result result = 2;

  // If set, then the request will succeed if and only if the provided etag
  // matches the server-computed value, else will fail.
  // Should be used to prevent concurrent updates from overwritting each other.
  string etag = 3;
}

message GetResultRequest {
  string name = 1;
}

message ListResultsRequest {
  string parent = 1;

  string filter = 2;

  int32 page_size = 3;
  string page_token = 4;
  string order_by = 5;
}

message ListResultsResponse {
  repeated Result results = 1;
  string next_page_token = 2;
}

message CreateRecordRequest {
  // User provided parent to partition results under.
  string parent = 1 [(google.api.resource_reference) = {
    type: "tekton.results.v1alpha2/Result"
    child_type: "tekton.results.v1alpha2/Record"
  }];

  Record record = 2 [(google.api.field_behavior) = REQUIRED];
}

message DeleteRecordRequest {
  string name = 1;
}

message UpdateRecordRequest {
  Record record = 1;

  google.protobuf.FieldMask update_mask = 2;
  // If set, then the request will succeed if and only if the provided etag
  // matches the server-computed value, else will fail.
  // Should be used to prevent concurrent updates from overwritting each other.
  string etag = 3;
}

message GetRecordRequest {
  string name = 1;
}

message ListRecordsRequest {
  string parent = 1;

  string filter = 2;

  int32 page_size = 3;
  string page_token = 4;
  string order_by = 5;
}

message ListRecordsResponse {
  repeated Record records = 1;
  string next_page_token = 2;
}

message GetLogRequest {
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "tekton.results.v1alpha2/Record"
    }];
}

message DeleteLogRequest {
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {
      type: "tekton.results.v1alpha2/Record"
    }];
}